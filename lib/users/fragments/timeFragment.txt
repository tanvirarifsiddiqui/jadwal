import 'package:flutter/material.dart';
import 'package:get/get.dart';
// import 'package:jadwal/admins/controllers/time_controller.dart';
import 'package:jadwal/mosques/mosquePreferences/current_mosque.dart';

class AdminHomeFragmentScreen extends StatefulWidget {
  @override
  _AdminHomeFragmentScreenState createState() => _AdminHomeFragmentScreenState();
}

class _AdminHomeFragmentScreenState extends State<AdminHomeFragmentScreen> {
  final CurrentMosque _currentMosque = Get.put(CurrentMosque());

  bool _dataFetched = false; // Track if data has been fetched


  @override
  void initState() {
    super.initState();
    _fetchPrayerTimes(); // Fetch the prayer times when the widget is initialized
  }

  Future<void> _fetchPrayerTimes() async {
    await _currentMosque.getMosqueInfo(); // Fetch the prayer times from the database
    setState(() {
      _dataFetched = true;
    }); // Trigger a rebuild after fetching the data
  }

  @override
  Widget build(BuildContext context) {
    return ListView(
      padding: const EdgeInsets.all(32),
      children: [
        Center(
          child: Image.asset("images/mosque.png", width: 240,),
        ),

        const SizedBox(height: 20,),
        _dataFetched
            ? _buildPrayerTimeWidgets() // Build prayer time widgets if data is fetched
            : const Center(child: CircularProgressIndicator()), // Show loading indicator while fetching data

      ],
    );
  }

Widget _buildPrayerTimeWidgets(){
    return Column(
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            Flexible(child: prayerTimeItem('Fajr', _currentMosque.mosque.fajr)),
            const SizedBox(width: 12,),
            Flexible(child: prayerTimeItem('Zuhr', _currentMosque.mosque.zuhr)),
          ],
        ),

        const SizedBox(height: 12,),

        Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            Flexible(child: prayerTimeItem('Asr', _currentMosque.mosque.asr)),
            const SizedBox(width: 12,),
            Flexible(child: prayerTimeItem('Maghrib', _currentMosque.mosque.maghrib)),
          ],
        ),

        const SizedBox(height: 12,),

        Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            Flexible(child: prayerTimeItem('Isha', _currentMosque.mosque.isha)),
            const SizedBox(width: 12,),
            Flexible(child: prayerTimeItem('Jumuah', _currentMosque.mosque.jumuah)),
          ],
        ),

        const SizedBox(height: 12,),

        // Add more widget boxes as needed
      ],
    );

}

  Widget prayerTimeItem(String prayerName, TimeOfDay prayerTime) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(15),
        color: Colors.brown[400],
      ),
      padding: const EdgeInsets.symmetric(
        horizontal: 8,
        vertical: 8,
      ),
      child: Column(
        children: [
          Text(
            prayerName,
            style: const TextStyle(
              fontSize: 22,
              fontWeight: FontWeight.bold,
              color: Colors.white70,
            ),
          ),
          const Divider(color: Colors.white,),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Spacer(),
              Text(
                  // prayerTime.value,
                "${prayerTime.hour.toString().padLeft(2,"0")}:${prayerTime.minute.toString().padLeft(2,"0")}",
                  style: const TextStyle(
                    fontSize: 30,
                    color: Colors.white70,
                  ),
                ),
              IconButton(
                icon: const Icon(Icons.edit, color: Colors.white70),
                onPressed: () async {
                  print(prayerTime);
                  print(prayerName);
                  //Time Controller
                    TimeOfDay ? pickedTime = await showTimePicker(
                      context: Get.context!,
                      initialTime: prayerTime,
                      builder: (context, child){
                        return Theme(data: ThemeData.dark(), child: child!);
                      },
                      initialEntryMode: TimePickerEntryMode.dial,
                      helpText: "Select Prayer Time",
                    );
                    if(pickedTime != null && pickedTime != prayerTime){
                      prayerTime = pickedTime;
                    }
                    print(pickedTime);



                  // After editing the time, you might need to fetch and update the new time
                  await _currentMosque.getMosqueInfo(); // Fetch the updated time from the database

                  setState(() {}); // Trigger a rebuild to reflect the changes
                },
              ),
            ],
          )
        ],
      ),
    );
  }


}
